Chaining together parsing and validation:

Can write functions for this pretty easily and get something like:

> version: validate(read_bit_field(&mut buf, "version field"), validate_version)?

But if the field fails at the validation step, I won't have the field name.  If we
'validation' is special enough that it deserves some special treatment, we could write
extra versions of all the read functions to take in a validation function, like:

> version: read_validated_bit_field(& mut buf, "version field", validate_version)

One downside of this is that we'd need to write a validated version of _all_ the field
reading functions.

Other options:
1. Pass the field name to both functions (bleh)
1. Somehow encode the field name in a successful PacketParseResult (would this be possible in a
   way that wouldn't make it too annoying to get at the underlying value?)
1. Pass the field name once, and somehow curry it to each of the underlying functions?  I think
   this would still require writing extra functions

The currying option is interesting: maybe none of the read_xxx functions should take the field name, but
instead have that be handled by some higher layer which inserted the field name into the error message?
--> I basically already have this layer of abstraction: those are the bitbuffer methods.

at this point the best I can think of is the extra methods for validation.  at least they can re-use the
original read methods to do the actual read


I'm running into this again and really wanting to be able to write functional-style methods that can
be chained together and wishing I had access to the field name in a PacketParseResult.  I'm thinking
now about writing a custom Result-style type that will also keep the field name.

Things I want to be able to do:

let version = try_parse_field("version", || buf.read_bits_as_u8(2))?;
let version = try_parse_field("version", || buf.read_bits_as_u8(2)?.validate(validate_version))?;
let header = Rtcpheader {
    version: try_parse_field("version", || buf.read_bits_as_u8(2)?.validate(validate_version))?,
    has_padding: try_parse_field("has_padding", || buf.read_bool()?,
    ...
};

Think I was able to achieve the above behavior.  A couple notes:
- This actually ended up requiring that 'Validatable' be implemented on a plain T, not some form
  of Result<T, E>.  I think this is probably better, as it keeps Validatable simpler, and also
  means that we don't bother calling validate if the previous operation failed (since the '?'
  on the previous call will either grab the actual value or return with the error
- Right now I'm requiring the validated value implements Copy: need to find a good way to
  support both simply-copyable values (u8, u16, etc.) as well as passing more expensive types
  by references (e.g. a slice of bytes)
